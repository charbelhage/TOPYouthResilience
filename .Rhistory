knitr::opts_chunk$set(echo = TRUE)
install.packages("rgoogleslides")
rstudioapi::getSourceEditorContext()$path
xv
rstudioapi::getSourceEditorContext()$path
shiny::runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(palmerpenguins)
ui <- fluidPage(
fluidRow(column(6,
varSelectInput("var1", "X Variable", data = penguins),
varSelectInput("var2", "Variable y", data = penguins)
),
column(6)
), #end of fluid row
fluidRow(column(6),
column(6, plotOutput("plot"))
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes(x = !!input$var1, y = !!input$var2,
color = !!penguins$species)) +
geom_point()
})
}
shinyApp(ui, server)
runApp('Homework/hw_06/hw06-meeraranee/housing_app/R')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp()
runApp()
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
runApp('~/Documents/TOP/Test Code/TOPTest')
HTML(paste(
"", "<b><img src=https://www.youthdynamics.org/wp-content/uploads/2022/07/Drop-the-Labels-Kids-Shine-When-We-Focus-on-Strengths.png></b>", "",
"", "<b>What is the problem?</b>","",
"<i>Sample text:</i> Covid-19 and other disasters have highlighted critical
gaps in mental health care for children and youth in the US and PR.
Advancing equity and promoting resilience in mental health for this
age demographic can help to strengthen the impact of disasters in
the community.",
sep = "<br/>"
))
runApp('~/Documents/TOP/Code/TOPYouthResilience/YouthResilience')
# Import libraries
library(shiny)
# Youth Resilience in PR Shiny App
# Import libraries
library(shiny)
library(shinythemes)
library(dplyr)
# Build app
ui <- fluidPage(theme = shinytheme("darkly"),
# Application title
titlePanel("Enhancing Children's Resilience to Adversity in Puerto Rico",
windowTitle = "Youth Resilience in PR"),
# Tab 1
tabsetPanel(type = "pills", id = "tabselected",
tabPanel("Background Information", value = 1
),
# Tab 2
tabPanel("Classroom Activities", value = 2
),
# Tab 3
tabPanel("Resources", value = 3
),
# Tab 4
tabPanel("Data Sources", value = 4
),
),
mainPanel(
conditionalPanel(condition = "input.tabselected==1",
htmlOutput("youthinfo")
),
# conditionalPanel(condition = "input.tabselected==2"
# ),
# conditionalPanel(condition = "input.tabselected==3"
# ),
# conditionalPanel(condition = "input.tabselected==4"
# ),
),
)
# Define server logic
server <- function(input, output) {
output$youthinfo <- renderUI ({
HTML(paste(
"", "<b><img src=https://www.youthdynamics.org/wp-content/uploads/2022/07/Drop-the-Labels-Kids-Shine-When-We-Focus-on-Strengths.png></b>", "",
"", "<b>What is the problem?</b>","",
"<i>Sample text:</i> Covid-19 and other disasters have highlighted critical
gaps in mental health care for children and youth in the US and PR.
Advancing equity and promoting resilience in mental health for this
age demographic can help to strengthen the impact of disasters in
the community.",
sep = "<br/>"
))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Youth Resilience in PR Shiny App
# Import libraries
library(shiny)
library(shinythemes)
library(dplyr)
# Build app
ui <- fluidPage(theme = shinytheme("darkly"),
# Application title
titlePanel("Enhancing Children's Resilience to Adversity in Puerto Rico",
windowTitle = "Youth Resilience in PR"),
# Tab 1
tabsetPanel(type = "pills", id = "tabselected",
tabPanel("Background Information", value = 1
),
# Tab 2
tabPanel("Classroom Activities", value = 2
),
# Tab 3
tabPanel("Resources", value = 3
),
# Tab 4
tabPanel("Data Sources", value = 4
),
),
mainPanel(
conditionalPanel(condition = "input.tabselected==1",
htmlOutput("youthinfo")
),
# conditionalPanel(condition = "input.tabselected==2"
# ),
# conditionalPanel(condition = "input.tabselected==3"
# ),
# conditionalPanel(condition = "input.tabselected==4"
# ),
),
)
# Define server logic
server <- function(input, output) {
output$youthinfo <- renderUI ({
HTML(paste(
"", "<b><img src=https://www.youthdynamics.org/wp-content/uploads/2022/07/Drop-the-Labels-Kids-Shine-When-We-Focus-on-Strengths.png></b>", "",
"", "<b>What is the problem?</b>","",
"<i>Sample text:</i> Covid-19 and other disasters have highlighted critical
gaps in mental health care for children and youth in the US and PR.
Advancing equity and promoting resilience in mental health for this
age demographic can help to strengthen the impact of disasters in
the community.",
sep = "<br/>"
))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Youth Resilience in PR Shiny App
# Import libraries
library(shiny)
library(shinythemes)
library(dplyr)
# Build app
ui <- fluidPage(theme = shinytheme("darkly"),
# Application title
titlePanel("Enhancing Children's Resilience to Adversity in Puerto Rico",
windowTitle = "Youth Resilience in PR"),
# Tab 1
tabsetPanel(type = "pills", id = "tabselected",
tabPanel("Background Information", value = 1
),
# Tab 2
tabPanel("Classroom Activities", value = 2
),
# Tab 3
tabPanel("Resources", value = 3
),
# Tab 4
tabPanel("Data Sources", value = 4
),
),
mainPanel(
conditionalPanel(condition = "input.tabselected==1",
htmlOutput("youthinfo")
),
# conditionalPanel(condition = "input.tabselected==2"
# ),
# conditionalPanel(condition = "input.tabselected==3"
# ),
# conditionalPanel(condition = "input.tabselected==4"
# ),
),
)
# Define server logic
server <- function(input, output) {
output$youthinfo <- renderUI ({
HTML(paste(
"", "<b><img src=https://www.youthdynamics.org/wp-content/uploads/2022/07/Drop-the-Labels-Kids-Shine-When-We-Focus-on-Strengths.png></b>", "",
"", "<b>What is the problem?</b>","",
"<i>Sample text:</i> Covid-19 and other disasters have highlighted critical
gaps in mental health care for children and youth in the US and PR.
Advancing equity and promoting resilience in mental health for this
age demographic can help to strengthen the impact of disasters in
the community.",
sep = "<br/>"
))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Documents/TOP/Code/TOPYouthResilience')
setwd("~/Documents/TOP/Code/TOPYouthResilience")
setwd("~/Documents/TOP/Code/TOPYouthResilience/EDA")
knitr::opts_chunk$set(echo = TRUE)
AgeGroup <- read.csv("../../Data/ChildPopAgeGroup.csv")
head(AgeGroup)
AgeGroup
library(tidyverse)
library(dplyr)
df <- read.csv("../../Data/FamiliesChildrenBelowPL")
df <- read.csv("../../Data/FamiliesChildrenBelowPL.csv")
setwd("~/Documents/TOP/Code/TOPYouthResilience/EDA")
df <- read.csv("../../Data/FamiliesChildrenBelowPL.csv")
df <- read.csv("~/Documents/TOP/Code/Data/FamilesChildrenBelowPL.csv")
df
df %>%
group_by(FamilyType)
df %>%
remove_NA()
df %>%
remove_NA() %>%
group_by(FamilyType)
df %>%
is_na()
df %>%
is.na()
ncol(df)
nrow(df)
head(df)
df %>%
filter(FamilyType == All Families)
df %>%
filter(FamilyType == "All Families")
head(df)
df %>%
select(FamilyType, TimeFrame, DataFormat, Data)
df %>%
select(FamilyType, TimeFrame, DataFormat, Data) %>%
na.omit()
df %>%
select(FamilyType, TimeFrame, DataFormat, Data)
df %>%
select(FamilyType, TimeFrame, DataFormat, Data) %>%
drop_na()
df %>%
select(FamilyType, TimeFrame, DataFormat, Data)
df %>%
select(FamilyType, TimeFrame, DataFormat, Data) %>%
filter(FamilyType == "All Families")
df <- read.csv("~/Documents/TOP/Code/Data/FamilesChildrenBelowPL.csv")
head(df)
df
library(ggplot2)
df
df %>%
select(FamilyType, Year, Number)
df1
df %>%
select(FamilyType, Year, Number) -> df1
df1
ggplot(data = df, mapping = aes(x = Year, y = Number))
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number))
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType))
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type") +
x_lab("Year") +
y_lab("Number of Families")
ggplot(data = df) +
geom_smooth(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = reorder(Number, sort(as.numeric(Number))), color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = as.numeric(Number), color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = reorder(as.numeric(Number)), color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
df %>%
select(FamilyType, Year, Number) -> df1
ggplot(data = df) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
df <- read.csv("~/Documents/TOP/Code/Data/FamilesChildrenBelowPL.csv")
df
ggplot(data = df1) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) -> df1
ggplot(data = df1) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1) +
geom_point(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1) +
geom_point() +
geom_smooth(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
library(ggplot2)
ggplot(data = df1) +
geom_point() +
geom_smooth(mapping = aes(x = Year, y = Number, color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number, color = FamilyType)) +
geom_point() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number, color = FamilyType)) +
geom_point() +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(group = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
color
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth(mapping = aes(x = Year, y = Number)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year')")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year')")
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year')
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) %>%
mutate(Number = (Number/1,000)) -> df1
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) %>%
mutate(Number = (Number/1000)) -> df1
head(df1)
head(df1)
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
head(df1)
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) %>%
mutate(Number/1000 = Number) -> df1
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) %>%
mutate(Number = Number/1000) -> df1
head(df1)
df %>%
as.numeric(Number)
df %>%
as.numeric(Number)
df %>%
as.numeric("Number")
df
df %>%
select(FamilyType, Year, Number) %>%
group_by(Number) -> df1
head(df1)
ggplot(data = df1, mapping = aes(x = Year, y = Number)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population (in thousands)")
ggplot(data = df1, mapping = aes(x = Year, y = Number/1000)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population (in thousands)")
ggplot(data = df1, mapping = aes(x = Year, y = (Number/1000)) +
geom_smooth() +
xlab("Year") +
ggplot(data = df1, mapping = aes(x = Year, y = (Number/1000)) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population (in thousands)")
ylab("Population (in thousands)")
ggplot(data = df1, mapping = aes(x = Year, y = (Number/1000))) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population (in thousands)")
ggplot(data = df1, mapping = aes(x = Year, y = (Number))) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population (in thousands)")
ggplot(data = df1, mapping = aes(x = Year, y = (Number))) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line by Family Type") +
xlab("Year") +
ylab("Population")
ggplot(data = df1, mapping = aes(x = Year, y = (Number))) +
geom_point(mapping = aes(color = FamilyType)) +
geom_smooth() +
ggtitle("Families with Children Below Poverty Line in PR by Family Type") +
xlab("Year") +
ylab("Population")
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
runApp('~/Documents/TOP/Code/TOPYouthResilience')
